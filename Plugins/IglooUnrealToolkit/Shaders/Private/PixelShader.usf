// Copyright 2016-2020 Cadic AB. All Rights Reserved.
// @Author	Fredrik Lindh [Temaran] (temaran@gmail.com) {https://github.com/Temaran}
///////////////////////////////////////////////////////////////////////////////////////

#include "/Engine/Public/Platform.ush"

// VERTEX SHADER
////////////////

void MainVertexShader(float4 InPosition : ATTRIBUTE0, float2 InUV : ATTRIBUTE1, out float2 OutUV : TEXCOORD0, out float4 OutPosition : SV_POSITION)
{
	OutPosition = InPosition;
	OutUV = InUV;
}

// PIXEL SHADER
///////////////

Texture2D     InputTexture;
SamplerState	InputTextureSampler;
int frameNumber;
float4x4 projectionMatrix;
float4x4 viewMatrix;
float2 TextureSize;

float4 metadataBit(int x, uint value)
{
  float k = (int(value) & (1 << x)) != 0 ? 1.0 : 0.0;
  return float4(k, k, k, 1.0);
}

float4 metadataPixel(int2 p, int2 s)
{
  uint value;
  if (p.y == 0)
    value = uint(frameNumber);
  else if (p.y <= 16)
  {
    int index = p.y - 1;
    value = asuint(projectionMatrix[index / 4][index % 4]);
  }
  else
  {
    int index = p.y - 17;
    value = asuint(viewMatrix[index / 4][index % 4]);
  }
  return metadataBit(p.x, value);
}
  
int2 metadataSize()
  {return int2(32, 33);}

void MainPixelShader(in float2 uv : TEXCOORD0, out float4 OutColor : SV_Target0)
{
  int2 metadataPosition = int2(10, 10);

  int2 p = int2(TextureSize.x * uv.x, TextureSize.y * uv.y) - metadataPosition;
  int2 s = metadataSize();
  if (p.x >= 0 && p.y >= 0 && p.x < s.x && p.y < s.y)
    OutColor = metadataPixel(p, s);
  else
    OutColor = InputTexture.Sample(InputTextureSampler, uv.xy);
}
